%{
    use Pg::SQL::Parser::Element;
    my $factory = Pg::SQL::Parser::Element->new();
%}

%left OPERATOR

%%

top: statements                { $_[1] }
;

statements: statement          { [ $_[1] ] }
    | statements ';' statement { push @{ $_[1] }, $_[3]; $_[1] }
    | statements ';'           { $_[1] }
;

statement: select_stmt         { $_[1] }
;

select_stmt: SELECT result_columns {
                                        my $select = $factory->make( 'Select' );
                                        for my $rc ( @{ $_[2] } ) {
                                            my $res = $factory->make('Result_Column');
                                            $res->value( $rc->[0] );
                                            $res->alias( $rc->[1] ) if defined $rc->[1];
                                            $select->add_result( $res )
                                        }
                                        $select
                                    }
;

result_columns: result_column          { [ $_[1] ] }
    | result_columns ',' result_column { push @{ $_[1] }, $_[3]; $_[1] }
;

result_column: expr      { [ $_[1], undef ] }
    | expr AS identifier { [ $_[1], $_[3] ] }
;

expr: literal_value         { $_[1] }
    | expr OPERATOR expr    {
                                my $op = $factory->make( 'Operation' );
                                $op->operator( $_[2] );
                                $op->left( $_[1] );
                                $op->right( $_[3] );
                                $op;
                            }
;

literal_value: STRING_CONSTANT  { my $val = $factory->make( 'Literal_Value' ); $val->type( 'STRING_CONSTANT' );     $val->value ( $_[1] ); $val }
    | USTRING_CONSTANT          { my $val = $factory->make( 'Literal_Value' ); $val->type( 'USTRING_CONSTANT' );    $val->value ( $_[1] ); $val }
    | ESTRING_CONSTANT          { my $val = $factory->make( 'Literal_Value' ); $val->type( 'ESTRING_CONSTANT' );    $val->value ( $_[1] ); $val }
    | BITSTRING_CONSTANT        { my $val = $factory->make( 'Literal_Value' ); $val->type( 'BITSTRING_CONSTANT' );  $val->value ( $_[1] ); $val }
    | XBITSTRING_CONSTANT       { my $val = $factory->make( 'Literal_Value' ); $val->type( 'XBITSTRING_CONSTANT' ); $val->value ( $_[1] ); $val }
    | NUMERIC_CONSTANT          { my $val = $factory->make( 'Literal_Value' ); $val->type( 'NUMERIC_CONSTANT' );    $val->value ( $_[1] ); $val }
    | INTEGER_CONSTANT          { my $val = $factory->make( 'Literal_Value' ); $val->type( 'INTEGER_CONSTANT' );    $val->value ( $_[1] ); $val }
;

identifier: QUOTED_IDENTIFIER { $_[1] }
    | UQUOTED_IDENTIFIER      { $_[1] }
    | IDENTIFIER              { $_[1] }
;

%%

# vim: set ft=lex:

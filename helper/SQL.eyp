%{
    use Pg::SQL::Parser::Element;
    my $factory = Pg::SQL::Parser::Element->new();
%}

%left       OR
%left       AND
%right      NOT
%right      '='
%nonassoc   '<' '>'
%nonassoc   LIKE ILIKE SIMILAR
%nonassoc   ESCAPE
%nonassoc   BETWEEN
%left       POSTFIXOP
%nonassoc   NULL
%left       OPERATOR_NAME
%nonassoc   NOTNULL
%nonassoc   ISNULL
%nonassoc   IS
%left       '+' '-'
%left       '*' '/' '%'
%left       '^'
%right      UMINUS
%left       '(' ')'
%left       '::'
%left       '.'
%left       JOIN CROSS LEFT FULL RIGHT INNER NATURAL

%%

top: statements                { $_[1] }
;

statements: statement          { [ $_[1] ] }
    | statements ';' statement { push @{ $_[1] }, $_[3]; $_[1] }
    | statements ';'           { $_[1] }
;

statement: select_stmt         { $_[1] }
;

select_stmt: SELECT
                optional_select_distinct
                result_columns
                optional_from
                optional_where
                optional_grouping
                optional_having
                optional_windows
                optional_ordering
                optional_limit
                optional_offset    {
                                        my $q = $factory->make( 'Select', 'results' => $_[3], );
                                        $q->distinct( $_[2]  ) if defined $_[2];
                                        $q->sources(  $_[4]  ) if defined $_[4];
                                        $q->where(    $_[5]  ) if defined $_[5];
                                        $q->groups(   $_[6]  ) if defined $_[6];
                                        $q->having(   $_[7]  ) if defined $_[7];
                                        $q->windows(  $_[8]  ) if defined $_[8];
                                        $q->sorts(    $_[9]  ) if defined $_[9];
                                        $q->limit(    $_[10] ) if defined $_[10];
                                        $q->offset(   $_[11] ) if defined $_[11];
                                        $q;
                                    }
;

optional_windows: WINDOW window_list { $_[2] }
    | /* EMPTY */                    { undef }
;

window_list: window_with_name          { my $w = $_[1]; my $o = { @{ $w } }; $o }
    | window_list ',' window_with_name { my $o = $_[1]; my $w = $_[3]; $o->{ $w->[0] } = $w->[1]; $o }
;

window_with_name: identifier AS window_definition { [ $_[1], $_[3] ] }
;

optional_select_distinct: DISTINCT        { 1 }
    | DISTINCT ON '(' expression_list ')' { $_[4] }
    | /* EMPTY */                         { undef }
;

optional_limit: LIMIT a_expr { $_[2] }
    | /* EMPTY */            { undef }
;

optional_offset: OFFSET a_expr { $_[2] }
    | /* EMPTY */              { undef }
;

optional_from: FROM query_sources { $_[2] }
    | /* EMPTY */                 { undef }
;

optional_where: WHERE a_expr { $_[2] }
    | /* EMPTY */            { undef }
;

optional_grouping: GROUP BY expression_list { $_[3] }
    | /* EMPTY */                           { undef }
;

optional_ordering: ORDER BY ordering_list   { $_[3] }
    | /* EMPTY */                           { undef }
;

ordering_list: ordering_item          { [ $_[1] ] }
    | ordering_list ',' ordering_item { push @{ $_[1] }, $_[3]; $_[1] }
;

ordering_item: a_expr optional_direction optional_nulls_placement   {
                                                                        my $o = $factory->make( 'Ordering', 'value' => $_[1] );
                                                                        $o->direction( $_[2] ) if defined $_[2];
                                                                        $o->nulls( $_[3] ) if defined $_[3];
                                                                        $o;
                                                                    }
;

optional_direction: ASC { 'ASC' }
    | DESC              { 'DESC' }
    | /* EMPTY */       { undef }
;

optional_nulls_placement: S_NULLS_FIRST { 'FIRST' }
    | S_NULLS_LAST                      { 'LAST' }
    | /* EMPTY */                       { undef }
;

optional_having: HAVING a_expr { $_[2] }
    | /* EMPTY */              { undef }
;

expression_list: a_expr          { [ $_[1] ] }
    | expression_list ',' a_expr { push @{ $_[1] }, $_[3]; $_[1] }
;

query_sources: query_source          { [ $_[1] ] }
    | query_sources ',' query_source { push @{ $_[1] }, $_[3]; $_[1] }
;

query_source: table_source                       { $_[1] }
    | join_source                                { $_[1] }
;

window_definition: '(' optional_partitioning optional_ordering ')'  {
                                                                        my $w = $factory->make( 'Window' );
                                                                        $w->partitioning( $_[2] ) if $_[2];
                                                                        $w->sorts( $_[3] )        if $_[3];
                                                                        $w;
                                                                    }
;

optional_partitioning: PARTITION BY expression_list { $_[3] }
    | /* EMPTY */                                   { undef }
;

join_source: query_source normal_join_operator query_source join_condition { $factory->make( 'Join', 'left' => $_[1], 'right' => $_[3], 'type' => $_[2], 'condition_type' => $_[4]->[0], 'condition' => $_[4]->[1] ) }
    | query_source NATURAL normal_join_operator query_source               { $factory->make( 'Join', 'left' => $_[1], 'right' => $_[4], 'type' => 'natural ' . $_[3] ) }
    | query_source CROSS JOIN query_source                                 { $factory->make( 'Join', 'left' => $_[1], 'right' => $_[3], 'type' => 'cross join' ) }
;

normal_join_operator: JOIN      { "join" }
    | INNER JOIN                { "inner join" }
    | LEFT JOIN                 { "left join" }
    | LEFT OUTER JOIN           { "left outer join" }
    | RIGHT JOIN                { "right join" }
    | RIGHT OUTER JOIN          { "right outer join" }
    | FULL OUTER JOIN           { "full outer join" }
    | FULL JOIN                 { "full join" }
;

join_condition: ON a_expr                  { [ 'on', $_[2] ] }
    | USING '(' join_using_column_list ')' { [ 'using', $_[3] ] }
;

join_using_column_list: identifier          { [ $factory->make( 'Column', 'name' => $_[1] ) ] }
    | join_using_column_list ',' identifier { push @{ $_[1] }, $factory->make( 'Column', 'name' => $_[3] ); $_[1] }
;

table_source: identifier                         { $factory->make( 'Table', 'name' => $_[1] ) }
    | identifier identifier                      { $factory->make( 'Table', 'name' => $_[1], 'alias' => $_[2] ) }
    | identifier '.' identifier                  { $factory->make( 'Table', 'schema' => $_[1], 'name' => $_[2] ) }
    | identifier '.' identifier identifier       { $factory->make( 'Table', 'schema' => $_[1], 'name' => $_[3], 'alias' => $_[4] ) }
    | identifier AS identifier                   { $factory->make( 'Table', 'name' => $_[1], 'alias' => $_[3] ) }
    | identifier '.' identifier AS identifier    { $factory->make( 'Table', 'schema' => $_[1], 'name' => $_[3], 'alias' => $_[5] ) }
;

result_columns: result_column          { [ $_[1] ] }
    | result_columns ',' result_column { push @{ $_[1] }, $_[3]; $_[1] }
;

result_column: a_expr      { $factory->make( 'Result_Column', 'value' => $_[1] ) }
    | a_expr AS identifier { $factory->make( 'Result_Column', 'value' => $_[1], 'alias' => $_[3] ) }
;

a_expr:  c_expr                                            { $_[1] }
    | a_expr '::' normal_type                              { $factory->make( 'Cast', 'method' => '::', 'value' => $_[1], 'final_type' => $_[3] ) }
    | '+' a_expr                        %prec UMINUS       { $factory->make( 'Operation', 'operator' => $_[1], 'right' => $_[2] ) }
    | '-' a_expr                        %prec UMINUS       { $factory->make( 'Operation', 'operator' => $_[1], 'right' => $_[2] ) }
    | a_expr '+' a_expr                                    { $factory->make( 'Operation', 'operator' => $_[2], 'left' => $_[1], 'right' => $_[3] ) }
    | a_expr '-' a_expr                                    { $factory->make( 'Operation', 'operator' => $_[2], 'left' => $_[1], 'right' => $_[3] ) }
    | a_expr '*' a_expr                                    { $factory->make( 'Operation', 'operator' => $_[2], 'left' => $_[1], 'right' => $_[3] ) }
    | a_expr '/' a_expr                                    { $factory->make( 'Operation', 'operator' => $_[2], 'left' => $_[1], 'right' => $_[3] ) }
    | a_expr '%' a_expr                                    { $factory->make( 'Operation', 'operator' => $_[2], 'left' => $_[1], 'right' => $_[3] ) }
    | a_expr '^' a_expr                                    { $factory->make( 'Operation', 'operator' => $_[2], 'left' => $_[1], 'right' => $_[3] ) }
    | a_expr '<' a_expr                                    { $factory->make( 'Operation', 'operator' => $_[2], 'left' => $_[1], 'right' => $_[3] ) }
    | a_expr '>' a_expr                                    { $factory->make( 'Operation', 'operator' => $_[2], 'left' => $_[1], 'right' => $_[3] ) }
    | a_expr '=' a_expr                                    { $factory->make( 'Operation', 'operator' => $_[2], 'left' => $_[1], 'right' => $_[3] ) }
    | a_expr OPERATOR_NAME a_expr                          { $factory->make( 'Operation', 'operator' => $_[2], 'left' => $_[1], 'right' => $_[3] ) }
    | OPERATOR_NAME a_expr                                 { $factory->make( 'Operation', 'operator' => $_[1], 'right' => $_[2] ) }
    | a_expr OPERATOR_NAME        %prec POSTFIXOP          { $factory->make( 'Operation', 'operator' => $_[2], 'left' => $_[1] ) }
    | a_expr AND a_expr                                    { $factory->make( 'Operation', 'operator' => 'and', 'left' => $_[1], 'right' => $_[3] ) }
    | a_expr OR a_expr                                     { $factory->make( 'Operation', 'operator' => 'or', 'left' => $_[1], 'right' => $_[3] ) }
    | NOT a_expr                                           { $factory->make( 'Operation', 'operator' => 'not', 'right' => $_[2] ) }
    | a_expr LIKE a_expr                                   { $factory->make( 'Operation', 'operator' => 'like', 'left' => $_[1], 'right' => $_[3] ) }
    | a_expr LIKE a_expr ESCAPE a_expr                     { $factory->make( 'Operation', 'operator' => 'like', 'left' => $_[1], 'right' => $_[3], 'modifiers' => { 'escape' => $_[5] } ) }
    | a_expr NOT LIKE a_expr                               { $factory->make( 'Operation', 'operator' => 'not like', 'left' => $_[1], 'right' => $_[4] ) }
    | a_expr NOT LIKE a_expr ESCAPE a_expr                 { $factory->make( 'Operation', 'operator' => 'not like', 'left' => $_[1], 'right' => $_[4], 'modifiers' => { 'escape' => $_[7] } ) }
    | a_expr ILIKE a_expr                                  { $factory->make( 'Operation', 'operator' => 'ilike', 'left' => $_[1], 'right' => $_[3] ) }
    | a_expr ILIKE a_expr ESCAPE a_expr                    { $factory->make( 'Operation', 'operator' => 'ilike', 'left' => $_[1], 'right' => $_[3], 'modifiers' => { 'escape' => $_[5] } ) }
    | a_expr NOT ILIKE a_expr                              { $factory->make( 'Operation', 'operator' => 'not ilike', 'left' => $_[1], 'right' => $_[4] ) }
    | a_expr NOT ILIKE a_expr ESCAPE a_expr                { $factory->make( 'Operation', 'operator' => 'not ilike', 'left' => $_[1], 'right' => $_[4], 'modifiers' => { 'escape' => $_[6] } ) }
    | a_expr SIMILAR TO a_expr                    %prec SIMILAR         { $factory->make( 'Operation', 'operator' => 'similar to', 'left' => $_[1], 'right' => $_[4] ) }
    | a_expr SIMILAR TO a_expr ESCAPE a_expr      %prec SIMILAR         { $factory->make( 'Operation', 'operator' => 'similar to', 'left' => $_[1], 'right' => $_[4], 'modifiers' => { 'escape' => $_[6] } ) }
    | a_expr NOT SIMILAR TO a_expr                %prec SIMILAR         { $factory->make( 'Operation', 'operator' => 'not similar to', 'left' => $_[1], 'right' => $_[5] ) }
    | a_expr NOT SIMILAR TO a_expr ESCAPE a_expr  %prec SIMILAR         { $factory->make( 'Operation', 'operator' => 'not similar to', 'left' => $_[1], 'right' => $_[5], 'modifiers' => { 'escape' => $_[7] } ) }
    | a_expr IS NULL                                       { $factory->make( 'Operation', 'operator' => 'is null', 'left' => $_[1], ) }
    | a_expr ISNULL                                        { $factory->make( 'Operation', 'operator' => 'is null', 'left' => $_[1], ) }
    | a_expr IS NOT NULL                                   { $factory->make( 'Operation', 'operator' => 'is not null', 'left' => $_[1], ) }
    | a_expr NOTNULL                                       { $factory->make( 'Operation', 'operator' => 'is not null', 'left' => $_[1], ) }
    | a_expr IS TRUE                                       { $factory->make( 'Operation', 'operator' => 'is true', 'left' => $_[1], ) }
    | a_expr IS NOT TRUE                                   { $factory->make( 'Operation', 'operator' => 'is not true', 'left' => $_[1], ) }
    | a_expr IS FALSE                                      { $factory->make( 'Operation', 'operator' => 'is false', 'left' => $_[1], ) }
    | a_expr IS NOT FALSE                                  { $factory->make( 'Operation', 'operator' => 'is not false', 'left' => $_[1], ) }
    | a_expr IS DISTINCT FROM a_expr                 %prec IS      { $factory->make( 'Operation', 'operator' => 'is distinct from', 'left' => $_[1], 'right' => $_[5], ) }
    | a_expr IS NOT DISTINCT FROM a_expr             %prec IS      { $factory->make( 'Operation', 'operator' => 'is not distinct from', 'left' => $_[1], 'right' => $_[6]) }
    | a_expr BETWEEN b_expr AND b_expr                     { $factory->make( 'Operation', 'operator' => 'between', 'left' => $_[1], 'right' => [ $_[3], $_[5] ] ) }
    | a_expr NOT BETWEEN b_expr AND b_expr                 { $factory->make( 'Operation', 'operator' => 'not between', 'left' => $_[1], 'right' => [ $_[4], $_[6] ] ) }
    | a_expr BETWEEN SYMMETRIC b_expr AND b_expr           { $factory->make( 'Operation', 'operator' => 'between symmetric', 'left' => $_[1], 'right' => [ $_[4], $_[6] ] ) }
    | a_expr NOT BETWEEN SYMMETRIC b_expr AND b_expr       { $factory->make( 'Operation', 'operator' => 'not between symmetric', 'left' => $_[1], 'right' => [ $_[5], $_[7] ] ) }
    | a_expr BETWEEN ASYMMETRIC b_expr AND b_expr          { $factory->make( 'Operation', 'operator' => 'between asymmetric', 'left' => $_[1], 'right' => [ $_[4], $_[6] ] ) }
    | a_expr NOT BETWEEN ASYMMETRIC b_expr AND b_expr      { $factory->make( 'Operation', 'operator' => 'not between asymmetric', 'left' => $_[1], 'right' => [ $_[5], $_[7] ] ) }
;

b_expr:  c_expr                                            { $_[1] }
    | b_expr '::' normal_type                              { $factory->make( 'Cast', 'method' => '::', 'value' => $_[1], 'final_type' => $_[3] ) }
    | '+' b_expr                        %prec UMINUS       { $factory->make( 'Operation', 'operator' => $_[1], 'right' => $_[2] ) }
    | '-' b_expr                        %prec UMINUS       { $factory->make( 'Operation', 'operator' => $_[1], 'right' => $_[2] ) }
    | b_expr '+' b_expr                                    { $factory->make( 'Operation', 'operator' => $_[2], 'left' => $_[1], 'right' => $_[3] ) }
    | b_expr '-' b_expr                                    { $factory->make( 'Operation', 'operator' => $_[2], 'left' => $_[1], 'right' => $_[3] ) }
    | b_expr '*' b_expr                                    { $factory->make( 'Operation', 'operator' => $_[2], 'left' => $_[1], 'right' => $_[3] ) }
    | b_expr '/' b_expr                                    { $factory->make( 'Operation', 'operator' => $_[2], 'left' => $_[1], 'right' => $_[3] ) }
    | b_expr '%' b_expr                                    { $factory->make( 'Operation', 'operator' => $_[2], 'left' => $_[1], 'right' => $_[3] ) }
    | b_expr '^' b_expr                                    { $factory->make( 'Operation', 'operator' => $_[2], 'left' => $_[1], 'right' => $_[3] ) }
    | b_expr '<' b_expr                                    { $factory->make( 'Operation', 'operator' => $_[2], 'left' => $_[1], 'right' => $_[3] ) }
    | b_expr '>' b_expr                                    { $factory->make( 'Operation', 'operator' => $_[2], 'left' => $_[1], 'right' => $_[3] ) }
    | b_expr '=' b_expr                                    { $factory->make( 'Operation', 'operator' => $_[2], 'left' => $_[1], 'right' => $_[3] ) }
    | b_expr OPERATOR_NAME b_expr                          { $factory->make( 'Operation', 'operator' => $_[2], 'left' => $_[1], 'right' => $_[3] ) }
    | OPERATOR_NAME b_expr                                 { $factory->make( 'Operation', 'operator' => $_[1], 'right' => $_[2] ) }
    | b_expr OPERATOR_NAME                                 { $factory->make( 'Operation', 'operator' => $_[2], 'left' => $_[1] ) }
    | b_expr IS DISTINCT FROM b_expr           %prec IS            { $factory->make( 'Operation', 'operator' => 'is distinct from', 'left' => $_[1], 'right' => $_[5], ) }
    | b_expr IS NOT DISTINCT FROM b_expr       %prec IS            { $factory->make( 'Operation', 'operator' => 'is not distinct from', 'left' => $_[1], 'right' => $_[6]) }
;

c_expr:  column_expression { $_[1] }
    | literal_value        { $_[1] }
    | function_expression  { $_[1] }
    | '(' a_expr ')'       { $_[2] }
;

column_expression: identifier                   { $factory->make( 'Column', 'name' => $_[1] ) }
    | identifier '.' identifier                 { $factory->make( 'Column', 'name' => $_[3], 'source' => [ $_[1] ] ) }
    | identifier '.' identifier '.' identifier  { $factory->make( 'Column', 'name' => $_[5], 'source' => [ $_[1], $_[3] ] ) }
    | '*'                                       { $factory->make( 'Column', 'name' => $_[1] ) }
    | identifier '.' '*'                        { $factory->make( 'Column', 'name' => $_[3], 'source' => [ $_[1] ] ) }
    | identifier '.' identifier '.' '*'         { $factory->make( 'Column', 'name' => $_[5], 'source' => [ $_[1], $_[3] ] ) }
;

function_expression: function_name '(' optional_function_distinct function_args ')'           { $_[1]->arguments( $_[4] ); $_[1]->distinct(1) if $_[3]; $_[1] }
    | function_name '(' optional_function_distinct function_args ')' OVER '(' identifier ')'  { $_[1]->arguments( $_[4] ); $_[1]->window( $_[8] ); $_[1] }
    | function_name '(' optional_function_distinct function_args ')' OVER window_definition   { $_[1]->arguments( $_[4] ); $_[1]->window( $_[7] ); $_[1] }
    | normal_type literal_value                                                               { $factory->make( 'Cast', 'method' => 'function', 'value' => $_[2], 'final_type' => $_[1] ) }
    | CAST '(' a_expr AS normal_type ')'                                                      { $factory->make( 'Cast', 'method' => 'sql', 'value' => $_[3], 'final_type' => $_[5] ) }
;

optional_function_distinct: DISTINCT { 1 }
    | /* EMPTY */                    { undef }
;

function_name: identifier           { $factory->make( 'Function', 'name' => $_[1] ) }
    | identifier '.' identifier     { $factory->make( 'Function', 'name' => $_[3], 'schema' => $_[1] ) }
;

function_args: a_expr                    { [ $_[1] ] }
    | function_args ',' a_expr           { push @{ $_[1] }, $_[3]; $_[1] }
    | /* EMPTY */                        { [] }
;

literal_value: STRING_CONSTANT  { $factory->make( 'Literal_Value', 'type', => 'STRING_CONSTANT',     'value' => $_[1] ) }
    | USTRING_CONSTANT          { $factory->make( 'Literal_Value', 'type', => 'USTRING_CONSTANT',    'value' => $_[1] ) }
    | ESTRING_CONSTANT          { $factory->make( 'Literal_Value', 'type', => 'ESTRING_CONSTANT',    'value' => $_[1] ) }
    | BITSTRING_CONSTANT        { $factory->make( 'Literal_Value', 'type', => 'BITSTRING_CONSTANT',  'value' => $_[1] ) }
    | XBITSTRING_CONSTANT       { $factory->make( 'Literal_Value', 'type', => 'XBITSTRING_CONSTANT', 'value' => $_[1] ) }
    | NUMERIC_CONSTANT          { $factory->make( 'Literal_Value', 'type', => 'NUMERIC_CONSTANT',    'value' => $_[1] ) }
    | INTEGER_CONSTANT          { $factory->make( 'Literal_Value', 'type', => 'INTEGER_CONSTANT',    'value' => $_[1] ) }
;

identifier: QUOTED_IDENTIFIER { $_[1] }
    | UQUOTED_IDENTIFIER      { $_[1] }
    | IDENTIFIER              { $_[1] }
    | keywords_notreserved    { $_[1] }
;

normal_type: simple_type                                     { $_[1] }
    | NUMERIC '(' INTEGER_CONSTANT ')'                       { $factory->make( 'Type', 'name' => $_[1], 'limits' => [ $_[3] ] ) }
    | NUMERIC '(' INTEGER_CONSTANT ',' INTEGER_CONSTANT ')'  { $factory->make( 'Type', 'name' => $_[1], 'limits' => [ $_[3], $_[5] ] ) }
    | DECIMAL '(' INTEGER_CONSTANT ')'                       { $factory->make( 'Type', 'name' => $_[1], 'limits' => [ $_[3] ] ) }
    | DECIMAL '(' INTEGER_CONSTANT ',' INTEGER_CONSTANT ')'  { $factory->make( 'Type', 'name' => $_[1], 'limits' => [ $_[3], $_[5] ] ) }
    | VARCHAR '(' INTEGER_CONSTANT ')'                       { $factory->make( 'Type', 'name' => $_[1], 'limits' => [ $_[3] ] ) }
    | timestamp_type                                         { $_[1] }
    | time_type                                              { $_[1] }
    | interval_type                                          { $_[1] }
;

simple_type: base_type                                       { $_[1] }
    | identifier '.' base_type                               { $_[3]->schema( $_[1] ); $_[3] }
;

base_type: identifier                                        { $factory->make( 'Type', 'name' => $_[1] ) }
    | keywords_reserved_ok_for_functions_or_types            { $factory->make( 'Type', 'name' => $_[1] ) }
    | keywords_notreserved_not_ok_for_functions_or_types     { $factory->make( 'Type', 'name' => $_[1] ) }
    | DOUBLE PRECISION                                       { $factory->make( 'Type', 'name' => 'double precision' ) }
;

timestamp_type: TIMESTAMP WITH TIME ZONE                                           { $factory->make( 'Type', 'name' => 'timestamp with time zone' ) }
    | TIMESTAMP WITHOUT TIME ZONE                                        { $factory->make( 'Type', 'name' => 'timestamp without time zone' ) }
    | TIMESTAMP '(' INTEGER_CONSTANT ')'                                 { $factory->make( 'Type', 'limits' => [ $_[3] ], 'name' => 'timestamp' ) }
    | TIMESTAMP '(' INTEGER_CONSTANT ')' WITH TIME ZONE                  { $factory->make( 'Type', 'limits' => [ $_[3] ], 'name' => 'timestamp with time zone' ) }
    | TIMESTAMP '(' INTEGER_CONSTANT ')' WITHOUT TIME ZONE               { $factory->make( 'Type', 'limits' => [ $_[3] ], 'name' => 'timestamp without time zone' ) }
;

time_type: TIME WITH TIME ZONE                                      { $factory->make( 'Type', 'name' => 'time with time zone' ) }
    | TIME WITHOUT TIME ZONE                                   { $factory->make( 'Type', 'name' => 'time without time zone' ) }
    | TIME '(' INTEGER_CONSTANT ')'                            { $factory->make( 'Type', 'limits' => [ $_[3] ], 'name' => 'time' ) }
    | TIME '(' INTEGER_CONSTANT ')' WITH TIME ZONE             { $factory->make( 'Type', 'limits' => [ $_[3] ], 'name' => 'time with time zone' ) }
    | TIME '(' INTEGER_CONSTANT ')' WITHOUT TIME ZONE          { $factory->make( 'Type', 'limits' => [ $_[3] ], 'name' => 'time without time zone' ) }
;

interval_type: INTERVAL '(' INTEGER_CONSTANT ')'                    { $factory->make( 'Type', 'name' => 'interval', 'limits' => [ $_[3] ] ) }
    | base_interval_type YEAR                                       { $_[1]->name( $_[1]->name() . ' year' ); $_[1] }
    | base_interval_type MONTH                                      { $_[1]->name( $_[1]->name() . ' month' ); $_[1] }
    | base_interval_type DAY                                        { $_[1]->name( $_[1]->name() . ' day' ); $_[1] }
    | base_interval_type HOUR                                       { $_[1]->name( $_[1]->name() . ' hour' ); $_[1] }
    | base_interval_type MINUTE                                     { $_[1]->name( $_[1]->name() . ' minute' ); $_[1] }
    | base_interval_type SECOND                                     { $_[1]->name( $_[1]->name() . ' second' ); $_[1] }
    | base_interval_type YEAR TO MONTH                              { $_[1]->name( $_[1]->name() . ' year to month' ); $_[1] }
    | base_interval_type DAY TO HOUR                                { $_[1]->name( $_[1]->name() . ' day to hour' ); $_[1] }
    | base_interval_type DAY TO MINUTE                              { $_[1]->name( $_[1]->name() . ' day to minute' ); $_[1] }
    | base_interval_type DAY TO SECOND                              { $_[1]->name( $_[1]->name() . ' day to second' ); $_[1] }
    | base_interval_type HOUR TO MINUTE                             { $_[1]->name( $_[1]->name() . ' hour to minute' ); $_[1] }
    | base_interval_type HOUR TO SECOND                             { $_[1]->name( $_[1]->name() . ' hour to second' ); $_[1] }
    | base_interval_type MINUTE TO SECOND                           { $_[1]->name( $_[1]->name() . ' minute to second' ); $_[1] }
    | base_interval_type SECOND '(' INTEGER_CONSTANT ')'            {
                                                                        my $l = $_[1]->limits() // [];
                                                                        $l->[1] = $_[4];
                                                                        $_[1]->limits( $l );
                                                                        $_[1]->name( $_[1]->name() . ' second' );
                                                                        $_[1]
                                                                    }
    | base_interval_type DAY TO SECOND '(' INTEGER_CONSTANT ')'     {
                                                                        my $l = $_[1]->limits() // [];
                                                                        $l->[1] = $_[6];
                                                                        $_[1]->limits( $l );
                                                                        $_[1]->name( $_[1]->name() . ' day to second' );
                                                                        $_[1]
                                                                    }
    | base_interval_type HOUR TO SECOND '(' INTEGER_CONSTANT ')'    {
                                                                        my $l = $_[1]->limits() // [];
                                                                        $l->[1] = $_[6];
                                                                        $_[1]->limits( $l );
                                                                        $_[1]->name( $_[1]->name() . ' hour to second' );
                                                                        $_[1]
                                                                    }
    | base_interval_type MINUTE TO SECOND '(' INTEGER_CONSTANT ')'  {
                                                                        my $l = $_[1]->limits() // [];
                                                                        $l->[1] = $_[6];
                                                                        $_[1]->limits( $l );
                                                                        $_[1]->name( $_[1]->name() . ' minute to second' );
                                                                        $_[1]
                                                                    }
;

base_interval_type: INTERVAL               { $factory->make( 'Type', 'name' => 'interval' ) }
    | INTERVAL '(' INTEGER_CONSTANT ')'    { $factory->make( 'Type', 'name' => 'interval', 'limits' => [ $_[3] ] ) }
;

keywords_notreserved: ABORT
    | ABSOLUTE
    | ACCESS
    | ACTION
    | ADD
    | ADMIN
    | AFTER
    | AGGREGATE
    | ALSO
    | ALTER
    | ALWAYS
    | ASSERTION
    | ASSIGNMENT
    | AT
    | ATTRIBUTE
    | BACKWARD
    | BEFORE
    | BEGIN
    | BY
    | CACHE
    | CALLED
    | CASCADE
    | CASCADED
    | CATALOG
    | CHAIN
    | CHARACTERISTICS
    | CHECKPOINT
    | CLASS
    | CLOSE
    | CLUSTER
    | COLLATION
    | COMMENT
    | COMMENTS
    | COMMIT
    | COMMITTED
    | CONFIGURATION
    | CONNECTION
    | CONSTRAINTS
    | CONTENT
    | CONTINUE
    | CONVERSION
    | COPY
    | COST
    | CSV
    | CURRENT
    | CURSOR
    | CYCLE
    | DATA
    | DATABASE
    | DAY
    | DEALLOCATE
    | DECLARE
    | DEFAULTS
    | DEFERRED
    | DEFINER
    | DELETE
    | DELIMITER
    | DELIMITERS
    | DICTIONARY
    | DISABLE
    | DISCARD
    | DOCUMENT
    | DOMAIN
    | DOUBLE
    | DROP
    | EACH
    | ENABLE
    | ENCODING
    | ENCRYPTED
    | ENUM
    | ESCAPE
    | EXCLUDE
    | EXCLUDING
    | EXCLUSIVE
    | EXECUTE
    | EXPLAIN
    | EXTENSION
    | EXTERNAL
    | FAMILY
    | FIRST
    | FOLLOWING
    | FORCE
    | FORWARD
    | FUNCTION
    | FUNCTIONS
    | GLOBAL
    | GRANTED
    | HANDLER
    | HEADER
    | HOLD
    | HOUR
    | IDENTITY
    | IF
    | IMMEDIATE
    | IMMUTABLE
    | IMPLICIT
    | INCLUDING
    | INCREMENT
    | INDEX
    | INDEXES
    | INHERIT
    | INHERITS
    | INLINE
    | INPUT
    | INSENSITIVE
    | INSERT
    | INSTEAD
    | INVOKER
    | ISOLATION
    | KEY
    | LABEL
    | LANGUAGE
    | LARGE
    | LAST
    | LC_COLLATE
    | LC_CTYPE
    | LEVEL
    | LISTEN
    | LOAD
    | LOCAL
    | LOCATION
    | LOCK
    | MAPPING
    | MATCH
    | MAXVALUE
    | MINUTE
    | MINVALUE
    | MODE
    | MONTH
    | MOVE
    | NAME
    | NAMES
    | NEXT
    | NO
    | NOTHING
    | NOTIFY
    | NOWAIT
    | NULLS
    | OBJECT
    | OF
    | OFF
    | OIDS
    | OPERATOR
    | OPTION
    | OPTIONS
    | OWNED
    | OWNER
    | PARSER
    | PARTIAL
    | PARTITION
    | PASSING
    | PASSWORD
    | PLANS
    | PRECEDING
    | PREPARE
    | PREPARED
    | PRESERVE
    | PRIOR
    | PRIVILEGES
    | PROCEDURAL
    | PROCEDURE
    | QUOTE
    | RANGE
    | READ
    | REASSIGN
    | RECHECK
    | RECURSIVE
    | REF
    | REINDEX
    | RELATIVE
    | RELEASE
    | RENAME
    | REPEATABLE
    | REPLACE
    | REPLICA
    | RESET
    | RESTART
    | RESTRICT
    | RETURNS
    | REVOKE
    | ROLE
    | ROLLBACK
    | ROWS
    | RULE
    | SAVEPOINT
    | SCHEMA
    | SCROLL
    | SEARCH
    | SECOND
    | SECURITY
    | SEQUENCE
    | SEQUENCES
    | SERIALIZABLE
    | SERVER
    | SESSION
    | SET
    | SHARE
    | SHOW
    | SIMPLE
    | STABLE
    | STANDALONE
    | START
    | STATEMENT
    | STATISTICS
    | STDIN
    | STDOUT
    | STORAGE
    | STRICT
    | STRIP
    | SYSID
    | SYSTEM
    | TABLES
    | TABLESPACE
    | TEMP
    | TEMPLATE
    | TEMPORARY
    | TEXT
    | TRANSACTION
    | TRIGGER
    | TRUNCATE
    | TRUSTED
    | TYPE
    | UNBOUNDED
    | UNCOMMITTED
    | UNENCRYPTED
    | UNKNOWN
    | UNLISTEN
    | UNLOGGED
    | UNTIL
    | UPDATE
    | VACUUM
    | VALID
    | VALIDATE
    | VALIDATOR
    | VALUE
    | VARYING
    | VERSION
    | VIEW
    | VOLATILE
    | WHITESPACE
    | WITHOUT
    | WORK
    | WRAPPER
    | WRITE
    | XML
    | YEAR
    | YES
    | ZONE
;

keywords_reserved_ok_for_functions_or_types: AUTHORIZATION
    | BINARY
    | CONCURRENTLY
    | CROSS
    | CURRENT_SCHEMA
    | FREEZE
    | FULL
    | ILIKE
    | INNER
    | IS
    | ISNULL
    | JOIN
    | LEFT
    | LIKE
    | NATURAL
    | NOTNULL
    | OUTER
    | OVER
    | OVERLAPS
    | RIGHT
    | SIMILAR
    | VERBOSE
;

keywords_notreserved_not_ok_for_functions_or_types: BETWEEN
    | BIGINT
    | BIT
    | BOOLEAN
    | CHAR
    | CHARACTER
    | COALESCE
    | DEC
    | DECIMAL
    | EXISTS
    | EXTRACT
    | FLOAT
    | GREATEST
    | INOUT
    | INT
    | INTEGER
    | INTERVAL
    | LEAST
    | NATIONAL
    | NCHAR
    | NONE
    | NULLIF
    | NUMERIC
    | OUT
    | OVERLAY
    | POSITION
    | PRECISION
    | REAL
    | ROW
    | SETOF
    | SMALLINT
    | SUBSTRING
    | TIME
    | TIMESTAMP
    | TREAT
    | TRIM
    | VALUES
    | VARCHAR
    | XMLATTRIBUTES
    | XMLCONCAT
    | XMLELEMENT
    | XMLEXISTS
    | XMLFOREST
    | XMLPARSE
    | XMLPI
    | XMLROOT
    | XMLSERIALIZE
;

%%

# vim: set ft=lex:
